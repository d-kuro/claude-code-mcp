name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ripgrep

    - name: Run tests
      run: go test -v -race ./...

    - name: Run integration tests
      run: go test -v -tags=integration ./internal/integration/...

  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version info
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        COMMIT=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
        echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT

    - name: Build binaries
      env:
        VERSION: ${{ steps.version.outputs.version }}
        COMMIT: ${{ steps.version.outputs.commit }}
        BUILD_TIME: ${{ steps.version.outputs.build_time }}
      run: |
        mkdir -p dist
        
        # Build for multiple platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64" 
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          GOOS=${platform%/*}
          GOARCH=${platform#*/}
          output_name="claude-code-mcp-${GOOS}-${GOARCH}"
          
          if [ "$GOOS" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          
          echo "Building $output_name..."
          
          GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build \
            -a -installsuffix cgo \
            -ldflags="-s -w -X github.com/d-kuro/claude-code-mcp/pkg/version.Version=${VERSION} -X github.com/d-kuro/claude-code-mcp/pkg/version.Commit=${COMMIT} -X github.com/d-kuro/claude-code-mcp/pkg/version.BuildTime=${BUILD_TIME}" \
            -o "dist/${output_name}" \
            ./cmd/claude-code-mcp
          
          # Create checksum
          cd dist
          sha256sum "${output_name}" > "${output_name}.sha256"
          cd ..
        done

    - name: Create archives
      run: |
        cd dist
        
        for file in claude-code-mcp-*; do
          if [[ ! $file =~ \.sha256$ ]] && [[ ! $file =~ \.tar\.gz$ ]] && [[ ! $file =~ \.zip$ ]]; then
            if [[ $file =~ \.exe$ ]]; then
              # Windows: create zip
              zip "${file%.exe}.zip" "$file" "${file}.sha256"
              rm "$file" "${file}.sha256"
            else
              # Unix: create tar.gz
              tar -czf "${file}.tar.gz" "$file" "${file}.sha256"
              rm "$file" "${file}.sha256"
            fi
          fi
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-binaries
        path: dist/*

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get version info
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        COMMIT=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
        echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/claude-code-mcp
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push standard image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          COMMIT=${{ steps.version.outputs.commit }}
          BUILD_TIME=${{ steps.version.outputs.build_time }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/docker/Dockerfile.production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/claude-code-mcp:${{ steps.version.outputs.version }}-slim
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-slim
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          COMMIT=${{ steps.version.outputs.commit }}
          BUILD_TIME=${{ steps.version.outputs.build_time }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-binaries
        path: dist

    - name: Get version info
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "## Changes since ${PREVIOUS_TAG}" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "First release of Claude Code MCP Server" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## Docker Images" >> CHANGELOG.md
        echo "- \`docker pull ${{ secrets.DOCKER_USERNAME }}/claude-code-mcp:${{ steps.version.outputs.version }}\`" >> CHANGELOG.md
        echo "- \`docker pull ${{ secrets.DOCKER_USERNAME }}/claude-code-mcp:${{ steps.version.outputs.version }}-slim\`" >> CHANGELOG.md
        echo "- \`docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}\`" >> CHANGELOG.md
        
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Binary Installation" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "# Linux AMD64" >> CHANGELOG.md
        echo "curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/claude-code-mcp-linux-amd64.tar.gz | tar -xz" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "# macOS AMD64" >> CHANGELOG.md
        echo "curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/claude-code-mcp-darwin-amd64.tar.gz | tar -xz" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "# Windows AMD64" >> CHANGELOG.md
        echo "curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/claude-code-mcp-windows-amd64.zip -o claude-code-mcp.zip" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Claude Code MCP Server ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        files: |
          dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: create_release
    if: always()
    
    steps:
    - name: Get version info
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Notify success
      if: needs.create_release.result == 'success'
      run: |
        echo "✅ Release ${{ steps.version.outputs.version }} completed successfully!"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"

    - name: Notify failure
      if: needs.create_release.result == 'failure'
      run: |
        echo "❌ Release ${{ steps.version.outputs.version }} failed!"
        exit 1